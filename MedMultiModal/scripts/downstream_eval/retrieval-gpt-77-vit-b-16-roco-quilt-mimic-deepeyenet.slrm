#!/bin/bash

#SBATCH --job-name=multimodal_project
#SBATCH --partition=rtx6000,t4v1,t4v2
#SBATCH --mem-per-gpu=10GB
#SBATCH --time=6:00:00
#SBATCH --nodes=1
#SBATCH --gres=gpu:1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=4
#SBATCH --export=ALL
#SBATCH --output=../outputs/slurm-%j-%N.out
#SBATCH --open-mode=append

# load virtual environment
source ~/Documents/envs/mmm/bin/activate

cd ~/Documents/GitHub/Multimodal/MedMultiModal/src
git checkout main
export PYTHONPATH="."

# make a directory for results
mkdir $SLURM_JOBID

export NCCL_IB_DISABLE=1  # disable InfiniBand (the Vector cluster does not have it)
export NCCL_DEBUG=WARN
export NCCL_DEBUG_SUBSYS=WARN
export NCCL_ASYNC_ERROR_HANDLING=1 # set to 1 for NCCL backend
export CUDA_LAUNCH_BLOCKING=1
export TORCH_DISTRIBUTED_DEBUG=DETAIL
export HYDRA_FULL_ERROR=1
export OMP_NUM_THREADS=12

export MASTER_ADDR=$(hostname)
export MASTER_PORT=45678

nvidia-smi
echo SLURM_ARRAY_JOB_ID=${SLURM_ARRAY_JOB_ID}
echo SLURM_JOBID=${SLURM_JOBID}

# choose the model and pretrained weights
export MODEL=ViT-B-16
export PRETRAINED_WEIGHTS=/projects/multimodal/checkpoints/methods/Methods_Clip_TextUnlocked_2_ViT_B_16/checkpoints/epoch_3.pt
echo MODEL=${MODEL}
echo PRETRAINED_WEIGHTS=${PRETRAINED_WEIGHTS}


# “srun” executes the script <ntasks-per-node * nodes> times
echo RUNNING RETRIEVAL ON ROCO...
srun --export=ALL -N $SLURM_JOB_NUM_NODES --cpu_bind=v --accel-bind=gn \
    python -u clip_benchmark/cli.py eval \
    --dataset=roco \
    --task zeroshot_retrieval \
    --model ${MODEL} \
    --pretrained ${PRETRAINED_WEIGHTS} \
    --output=$SLURM_JOBID/result_roco.json \
    --recall_k 1 50 200 \
    --batch_size 64
echo RETRIEVAL ON ROCO FINISHED.

echo RUNNING RETRIEVAL ON QUILT...
srun --export=ALL -N $SLURM_JOB_NUM_NODES --cpu_bind=v --accel-bind=gn \
    python -u clip_benchmark/cli.py eval \
    --dataset quilt_1m \
    --split val \
    --dataset_root /projects/multimodal/datasets/Quilt_1M \
    --task zeroshot_retrieval \
    --model ${MODEL} \
    --pretrained ${PRETRAINED_WEIGHTS} \
    --output=$SLURM_JOBID/result_quilt_1m.json \
    --recall_k 1 50 200 \
    --batch_size 64
echo RETRIEVAL ON QUILT FINISHED.

echo RUNNING RETRIEVAL ON MIMIC-CXR...
srun --export=ALL -N $SLURM_JOB_NUM_NODES --cpu_bind=v --accel-bind=gn \
    python -u clip_benchmark/cli.py eval \
    --dataset mimic_cxr_double \
    --split test \
    --dataset_root /projects/multimodal/datasets/mimic_cxr/ \
    --task zeroshot_retrieval \
    --model ${MODEL} \
    --pretrained ${PRETRAINED_WEIGHTS} \
    --output=$SLURM_JOBID/result_mimic_cxr_double.json \
    --recall_k 1 50 200 \
    --batch_size 64
echo RETRIEVAL ON MIMIC-CXR FINISHED.

echo RUNNING RETRIEVAL ON DEEPEYENET...
srun --export=ALL -N $SLURM_JOB_NUM_NODES --cpu_bind=v --accel-bind=gn \
    python -u clip_benchmark/cli.py eval \
    --dataset deepeyenet \
    --split test \
    --dataset_root /projects/multimodal/datasets/DeepEyeNet \
    --task zeroshot_retrieval \
    --model ${MODEL} \
    --pretrained ${PRETRAINED_WEIGHTS} \
    --output=$SLURM_JOBID/result_deepeyenet.json \
    --recall_k 1 50 200 \
    --batch_size 64
echo RETRIEVAL ON DEEPEYENET FINISHED.

# save all results in a table
cd ../scripts/downstream_eval
python retrieval.py ${SLURM_JOBID}
