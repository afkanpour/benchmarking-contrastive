#!/bin/bash

#SBATCH --job-name=multimodal_project
#SBATCH --partition=rtx6000,t4v1,t4v2
#SBATCH --mem-per-gpu=16GB
#SBATCH --time=6:00:00
#SBATCH --nodes=1
#SBATCH --gres=gpu:1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=8
#SBATCH --export=ALL
#SBATCH --output=../outputs/slurm-%j-%N.out
#SBATCH --open-mode=append

# load virtual environment
source ~/Documents/envs/mmm/bin/activate

cd ~/Documents/GitHub/Multimodal/MedMultiModal/src
git checkout main
export PYTHONPATH="."

# make a directory for results
mkdir $SLURM_JOBID

export NCCL_IB_DISABLE=1  # disable InfiniBand (the Vector cluster does not have it)
export NCCL_DEBUG=WARN
export NCCL_DEBUG_SUBSYS=WARN
export NCCL_ASYNC_ERROR_HANDLING=1 # set to 1 for NCCL backend
export CUDA_LAUNCH_BLOCKING=1
export TORCH_DISTRIBUTED_DEBUG=DETAIL
export HYDRA_FULL_ERROR=1
export OMP_NUM_THREADS=6

export MASTER_ADDR=$(hostname)
export MASTER_PORT=45678

nvidia-smi
echo SLURM_ARRAY_JOB_ID=${SLURM_ARRAY_JOB_ID}
echo SLURM_JOBID=${SLURM_JOBID}

# choose the model and pretrained weights
export MODEL=ViT-B-16
export PRETRAINED_WEIGHTS=/projects/multimodal/checkpoints/methods/Methods_Clip_ImageUnlocked_7_ViT_B_16/checkpoints/epoch_6.pt
export FEWSHOT_LR=0.1
export FEWSHOT_EPOCHS=40
export BATCH_SIZE=64
echo MODEL=${MODEL}
echo PRETRAINED_WEIGHTS=${PRETRAINED_WEIGHTS}
echo FEWSHOT_LR=${FEWSHOT_LR}
echo FEWSHOT_EPOCHS=${FEWSHOT_EPOCHS}
echo BATCH_SIZE=${BATCH_SIZE}

# “srun” executes the script <ntasks-per-node * nodes> times
# vindr_mammo
echo Running linear probing on VinDr-Mammo...
srun --export=ALL -N $SLURM_JOB_NUM_NODES --cpu_bind=v --accel-bind=gn \
    python -u clip_benchmark/cli.py eval \
    --dataset vindr_mammo \
    --train_split training \
    --split test \
    --dataset_root /projects/multimodal/datasets/vindr_mammo \
    --task linear_probe \
    --model ${MODEL} \
    --pretrained ${PRETRAINED_WEIGHTS} \
    --output ${SLURM_JOBID}/result_vindr_mammo.json \
    --fewshot_lr ${FEWSHOT_LR} \
    --fewshot_epochs ${FEWSHOT_EPOCHS} \
    --batch_size ${BATCH_SIZE}
echo Linear probing on VinDr-Mammo finished.

# # mimic-cxr -> this dataset is removed since it also exists in our training data
# # options for --dataset: mimic_cxr_chexpert, mimic_cxr_negbio
# echo Running linear probing on MIMIC-CXR...
# srun --export=ALL -N $SLURM_JOB_NUM_NODES --cpu_bind=v --accel-bind=gn \
#     python -u clip_benchmark/cli.py eval \
#     --dataset mimic_cxr_chexpert \
#     --train_split train \
#     --split test \
#     --dataset_root /projects/multimodal/datasets/mimic_cxr/ \
#     --task linear_probe \
#     --model ${MODEL} \
#     --pretrained ${PRETRAINED_WEIGHTS} \
#     --output ${SLURM_JOBID}/result_mimic_cxr_chexpert.json \
#     --fewshot_lr ${FEWSHOT_LR} \
#     --fewshot_epochs ${FEWSHOT_EPOCHS} \
#     --batch_size ${BATCH_SIZE}
# echo Linear probing on MIMIC-CXR finished.

# pad_ufes_20
echo Running linear probing on Pad-UFES-20...
srun --export=ALL -N $SLURM_JOB_NUM_NODES --cpu_bind=v --accel-bind=gn \
    python -u clip_benchmark/cli.py eval \
    --dataset pad_ufes_20 \
    --train_split train \
    --split test \
    --dataset_root /projects/multimodal/datasets/pad_ufes_20 \
    --task linear_probe \
    --model ${MODEL} \
    --pretrained ${PRETRAINED_WEIGHTS} \
    --output ${SLURM_JOBID}/result_pad_ufes_20.json \
    --fewshot_lr ${FEWSHOT_LR} \
    --fewshot_epochs ${FEWSHOT_EPOCHS} \
    --batch_size ${BATCH_SIZE}
echo Linear probing on Pad-UFES-20 finished.

# skin_cancer
echo Running linear probing on SkinCancer...
srun --export=ALL -N $SLURM_JOB_NUM_NODES --cpu_bind=v --accel-bind=gn \
    python -u clip_benchmark/cli.py eval \
    --dataset skin_cancer \
    --train_split train \
    --split test \
    --dataset_root /projects/multimodal/datasets/skin_cancer \
    --task linear_probe \
    --model ${MODEL} \
    --pretrained ${PRETRAINED_WEIGHTS} \
    --output ${SLURM_JOBID}/result_skin_cancer.json \
    --fewshot_lr ${FEWSHOT_LR} \
    --fewshot_epochs ${FEWSHOT_EPOCHS} \
    --batch_size ${BATCH_SIZE}
echo Linear probing on SkinCancer finished.

# patch_camelyon
echo Running linear probing on PCAM...
srun --export=ALL -N $SLURM_JOB_NUM_NODES --cpu_bind=v --accel-bind=gn \
    python -u clip_benchmark/cli.py eval \
    --dataset pcam \
    --train_split train \
    --split test \
    --dataset_root /projects/multimodal/datasets/pcam/ \
    --task linear_probe \
    --model ${MODEL} \
    --pretrained ${PRETRAINED_WEIGHTS} \
    --output ${SLURM_JOBID}/result_pcam.json \
    --fewshot_lr ${FEWSHOT_LR} \
    --fewshot_epochs ${FEWSHOT_EPOCHS} \
    --batch_size ${BATCH_SIZE}
echo Linear probing on PCAM finished.

# nct_crc_he_100k
echo Running linear probing on NCT-CRC-HE-100K...
srun --export=ALL -N $SLURM_JOB_NUM_NODES --cpu_bind=v --accel-bind=gn \
    python -u clip_benchmark/cli.py eval \
    --dataset nck \
    --train_split train \
    --split validation \
    --dataset_root /projects/multimodal/datasets/nct_crc_he_100k/ \
    --task linear_probe \
    --model ${MODEL} \
    --pretrained ${PRETRAINED_WEIGHTS} \
    --output ${SLURM_JOBID}/result_nct_crc_he_100k.json \
    --fewshot_lr ${FEWSHOT_LR} \
    --fewshot_epochs ${FEWSHOT_EPOCHS} \
    --batch_size ${BATCH_SIZE}
echo Linear probing on NCT-CRC-HE-100K finished.

# lc25000lung
echo Running linear probing on LC25000Lung...
srun --export=ALL -N $SLURM_JOB_NUM_NODES --cpu_bind=v --accel-bind=gn \
    python -u clip_benchmark/cli.py eval \
    --dataset lc25000_lung \
    --train_split train \
    --split test \
    --dataset_root /projects/multimodal/datasets/lc25000lung \
    --task linear_probe \
    --model ${MODEL} \
    --pretrained ${PRETRAINED_WEIGHTS} \
    --output ${SLURM_JOBID}/result_lc25000lung.json \
    --fewshot_lr ${FEWSHOT_LR} \
    --fewshot_epochs ${FEWSHOT_EPOCHS} \
    --batch_size ${BATCH_SIZE}
echo Linear probing on LC25000Lung finished.

# lc25000colon
echo Running linear probing on LC25000Colon...
srun --export=ALL -N $SLURM_JOB_NUM_NODES --cpu_bind=v --accel-bind=gn \
    python -u clip_benchmark/cli.py eval \
    --dataset lc25000_colon \
    --train_split train \
    --split test \
    --dataset_root /projects/multimodal/datasets/lc25000colon \
    --task linear_probe \
    --model ${MODEL} \
    --pretrained ${PRETRAINED_WEIGHTS} \
    --output ${SLURM_JOBID}/result_lc25000colon.json \
    --fewshot_lr ${FEWSHOT_LR} \
    --fewshot_epochs ${FEWSHOT_EPOCHS} \
    --batch_size ${BATCH_SIZE}
echo Linear probing on LC25000Colon finished.

# bach
echo Running linear probing on BACH...
srun --export=ALL -N $SLURM_JOB_NUM_NODES --cpu_bind=v --accel-bind=gn \
    python -u clip_benchmark/cli.py eval \
    --dataset bach \
    --train_split train \
    --split test \
    --dataset_root /projects/multimodal/datasets/bach \
    --task linear_probe \
    --model ${MODEL} \
    --pretrained ${PRETRAINED_WEIGHTS} \
    --output ${SLURM_JOBID}/result_bach.json \
    --fewshot_lr ${FEWSHOT_LR} \
    --fewshot_epochs ${FEWSHOT_EPOCHS} \
    --batch_size ${BATCH_SIZE}
echo Linear probing on BACH finished.

# sicapv2
echo Running linear probing on Sicap_v2...
srun --export=ALL -N $SLURM_JOB_NUM_NODES --cpu_bind=v --accel-bind=gn \
    python -u clip_benchmark/cli.py eval \
    --dataset sicap \
    --train_split train \
    --split test \
    --dataset_root /projects/multimodal/datasets/sicap  \
    --task linear_probe \
    --model ${MODEL} \
    --pretrained ${PRETRAINED_WEIGHTS} \
    --output ${SLURM_JOBID}/result_sicap.json \
    --fewshot_lr ${FEWSHOT_LR} \
    --fewshot_epochs ${FEWSHOT_EPOCHS} \
    --batch_size ${BATCH_SIZE}
echo Linear probing on Sicap_v2 finished.

# save all results in a table
cd ../scripts/downstream_eval
python zeroshot_classification.py ${SLURM_JOBID}